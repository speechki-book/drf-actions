[tool.poetry]
name = "drf-actions"
version = "0.2.1"
description = "Create event log with help triggers and send notify after create event"
authors = ["Pavel Maltsev <pavel@speechki.org>"]
readme = "README.md"
homepage = "https://github.com/speechki-book/drf-actions"
license = "MIT"
keywords=["django", "restframework", "drf", "events", "log"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]
exclude = ["tests*"]

[tool.poetry.dependencies]
python = "^3.7"
Django = ">3.1.6"
djangorestframework = ">=3.12.2"
django-model-utils = ">=4.1.1"
django-filter = ">=2.4.0"

[tool.poetry.dev-dependencies]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 119
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.flake8]
ignore = [
    # Too many leading '#' for block comment ( https://www.flake8rules.com/rules/E266.html )
    "E266",
    # Whitespace before ':' ( https://www.flake8rules.com/rules/E203.html )
    "E203",
    # Line break occurred before a binary operator ( https://www.flake8rules.com/rules/W503.html )
    "W503"
]
max-line-length = 119
max-complexity = 15
select = "B,C,E,F,W,T4,B9"
exclude = [
    # No need to traverse our git directory
    ".git",
    # There's no value in checking cache directories
    "__pycache__",
    # The old directory contains Flake8 2.0
    "old",
    # This contains our built documentation
    "build",
    # This contains builds of flake8 that we don't want to check
    "dist",
    # django migrations
    "migrations"
]
# Module imported but unused ( https://www.flake8rules.com/rules/F401.html )
per-file-ignores = [
  # Tests
  "test_*.py:E501",
  "tests.py:E501",
]

[tool.isort]
profile = "black"
line_length = 119
only_sections = true
force_sort_within_sections = true
lines_after_imports = 2
lexicographical = true
sections = ["FUTURE", "STDLIB", "BASEFRAMEWORK", "FRAMEWORKEXT", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_baseframework = ["django"]
known_frameworkext = ["rest_framework"]
src_paths = ["drf_actions"]
